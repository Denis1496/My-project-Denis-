Задание 1 

1. Сотрудника с максимальной заработной платой:

SELECT * FROM employees WHERE salary = (SELECT MAX(salary) FROM employees);


2. Максимальную длину цепочки руководителей по таблице сотрудников (вычислить глубину дерева):

WITH RECURSIVE cte AS (
    SELECT id, name, manager_id, 1 AS depth
    FROM employees
    WHERE manager_id IS NULL
    UNION ALL
    SELECT e.id, e.name, e.manager_id, c.depth + 1
    FROM employees e
    JOIN cte c ON e.manager_id = c.id
)
SELECT MAX(depth) FROM cte;


3. Отдел с максимальной суммарной зарплатой сотрудников:

WITH sum_salary AS (
    SELECT department_id, SUM(salary) salary
    FROM employees
    GROUP BY department_id
)
SELECT department_id FROM sum_salary WHERE salary = (SELECT MAX(salary) FROM sum_salary);


4. Сотрудника, чье имя начинается на «Р» и заканчивается на «н»:

SELECT * FROM employees WHERE name LIKE 'Р%н';




Задание 2

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

class Program
{
    static void Main(string[] args)
    {
        string filePath = @"D:\Projects\bin\Debug\input.txt";

        // Читаем текстовый файл и сохраняем его содержимое в строку.
        string text = File.ReadAllText(filePath);

        // Разбиваем строку на слова и сохраняем их в массив.
        string[] words = text.Split(new char[] { ' ', '.', ',', '!', '?', ';', ':', '-', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);

        // Создаем словарь для хранения количества употреблений слов.
        Dictionary<string, int> wordCount = new Dictionary<string, int>();

        // Проходим по всем словам в массиве и увеличиваем счетчик для каждого слова.
        foreach(string word in words)
        {
            if (wordCount.ContainsKey(word))
            {
                wordCount[word]++;
            }
            else
            {
                wordCount[word] = 1;
            }
        }

        // Сортируем словарь по убыванию количества употреблений слов.
        var sortedDict = from entry in wordCount orderby entry.Value descending select entry;

        // Записываем результаты в текстовый файл.
        using (StreamWriter writer = new StreamWriter("output.txt"))
        {
            foreach (KeyValuePair<string, int> pair in sortedDict)
            {
                writer.WriteLine("{0} - {1}", pair.Key, pair.Value);
            }
        }
    }
}
